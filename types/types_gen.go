package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Block) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ht":
			z.Height, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "bh":
			err = dc.ReadExactBytes((z.BlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "bi":
			z.BlockInfo, err = dc.ReadBytes(z.BlockInfo)
			if err != nil {
				err = msgp.WrapError(err, "BlockInfo")
				return
			}
		case "tx":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TxList")
				return
			}
			if cap(z.TxList) >= int(zb0002) {
				z.TxList = (z.TxList)[:zb0002]
			} else {
				z.TxList = make([]Tx, zb0002)
			}
			for za0002 := range z.TxList {
				err = z.TxList[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "TxList", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Block) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "ht"
	err = en.Append(0x84, 0xa2, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "bh"
	err = en.Append(0xa2, 0x62, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.BlockHash)[:])
	if err != nil {
		err = msgp.WrapError(err, "BlockHash")
		return
	}
	// write "bi"
	err = en.Append(0xa2, 0x62, 0x69)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.BlockInfo)
	if err != nil {
		err = msgp.WrapError(err, "BlockInfo")
		return
	}
	// write "tx"
	err = en.Append(0xa2, 0x74, 0x78)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TxList)))
	if err != nil {
		err = msgp.WrapError(err, "TxList")
		return
	}
	for za0002 := range z.TxList {
		err = z.TxList[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "TxList", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Block) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "ht"
	o = append(o, 0x84, 0xa2, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.Height)
	// string "bh"
	o = append(o, 0xa2, 0x62, 0x68)
	o = msgp.AppendBytes(o, (z.BlockHash)[:])
	// string "bi"
	o = append(o, 0xa2, 0x62, 0x69)
	o = msgp.AppendBytes(o, z.BlockInfo)
	// string "tx"
	o = append(o, 0xa2, 0x74, 0x78)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TxList)))
	for za0002 := range z.TxList {
		o, err = z.TxList[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "TxList", za0002)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Block) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ht":
			z.Height, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "bh":
			bts, err = msgp.ReadExactBytes(bts, (z.BlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "bi":
			z.BlockInfo, bts, err = msgp.ReadBytesBytes(bts, z.BlockInfo)
			if err != nil {
				err = msgp.WrapError(err, "BlockInfo")
				return
			}
		case "tx":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxList")
				return
			}
			if cap(z.TxList) >= int(zb0002) {
				z.TxList = (z.TxList)[:zb0002]
			} else {
				z.TxList = make([]Tx, zb0002)
			}
			for za0002 := range z.TxList {
				bts, err = z.TxList[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxList", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Block) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int64Size + 3 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 3 + msgp.BytesPrefixSize + len(z.BlockInfo) + 3 + msgp.ArrayHeaderSize
	for za0002 := range z.TxList {
		s += z.TxList[za0002].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BlockIndex) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ht":
			z.Height, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "bH":
			err = dc.ReadExactBytes((z.BlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "bh":
			z.BlockHash48, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BlockHash48")
				return
			}
		case "thl":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TxHash48List")
				return
			}
			if cap(z.TxHash48List) >= int(zb0002) {
				z.TxHash48List = (z.TxHash48List)[:zb0002]
			} else {
				z.TxHash48List = make([]uint64, zb0002)
			}
			for za0002 := range z.TxHash48List {
				z.TxHash48List[za0002], err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "TxHash48List", za0002)
					return
				}
			}
		case "bo":
			z.BeginOffset, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "BeginOffset")
				return
			}
		case "tpl":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TxPosList")
				return
			}
			if cap(z.TxPosList) >= int(zb0003) {
				z.TxPosList = (z.TxPosList)[:zb0003]
			} else {
				z.TxPosList = make([]int64, zb0003)
			}
			for za0003 := range z.TxPosList {
				z.TxPosList[za0003], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "TxPosList", za0003)
					return
				}
			}
		case "sh":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "SrcHashes")
				return
			}
			if cap(z.SrcHashes) >= int(zb0004) {
				z.SrcHashes = (z.SrcHashes)[:zb0004]
			} else {
				z.SrcHashes = make([]uint64, zb0004)
			}
			for za0004 := range z.SrcHashes {
				z.SrcHashes[za0004], err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "SrcHashes", za0004)
					return
				}
			}
		case "sp":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "SrcPosLists")
				return
			}
			if cap(z.SrcPosLists) >= int(zb0005) {
				z.SrcPosLists = (z.SrcPosLists)[:zb0005]
			} else {
				z.SrcPosLists = make([][]uint32, zb0005)
			}
			for za0005 := range z.SrcPosLists {
				var zb0006 uint32
				zb0006, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "SrcPosLists", za0005)
					return
				}
				if cap(z.SrcPosLists[za0005]) >= int(zb0006) {
					z.SrcPosLists[za0005] = (z.SrcPosLists[za0005])[:zb0006]
				} else {
					z.SrcPosLists[za0005] = make([]uint32, zb0006)
				}
				for za0006 := range z.SrcPosLists[za0005] {
					z.SrcPosLists[za0005][za0006], err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "SrcPosLists", za0005, za0006)
						return
					}
				}
			}
		case "dh":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DstHashes")
				return
			}
			if cap(z.DstHashes) >= int(zb0007) {
				z.DstHashes = (z.DstHashes)[:zb0007]
			} else {
				z.DstHashes = make([]uint64, zb0007)
			}
			for za0007 := range z.DstHashes {
				z.DstHashes[za0007], err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "DstHashes", za0007)
					return
				}
			}
		case "dp":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DstPosLists")
				return
			}
			if cap(z.DstPosLists) >= int(zb0008) {
				z.DstPosLists = (z.DstPosLists)[:zb0008]
			} else {
				z.DstPosLists = make([][]uint32, zb0008)
			}
			for za0008 := range z.DstPosLists {
				var zb0009 uint32
				zb0009, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "DstPosLists", za0008)
					return
				}
				if cap(z.DstPosLists[za0008]) >= int(zb0009) {
					z.DstPosLists[za0008] = (z.DstPosLists[za0008])[:zb0009]
				} else {
					z.DstPosLists[za0008] = make([]uint32, zb0009)
				}
				for za0009 := range z.DstPosLists[za0008] {
					z.DstPosLists[za0008][za0009], err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "DstPosLists", za0008, za0009)
						return
					}
				}
			}
		case "ah":
			var zb0010 uint32
			zb0010, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "AddrHashes")
				return
			}
			if cap(z.AddrHashes) >= int(zb0010) {
				z.AddrHashes = (z.AddrHashes)[:zb0010]
			} else {
				z.AddrHashes = make([]uint64, zb0010)
			}
			for za0010 := range z.AddrHashes {
				z.AddrHashes[za0010], err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "AddrHashes", za0010)
					return
				}
			}
		case "ap":
			var zb0011 uint32
			zb0011, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "AddrPosLists")
				return
			}
			if cap(z.AddrPosLists) >= int(zb0011) {
				z.AddrPosLists = (z.AddrPosLists)[:zb0011]
			} else {
				z.AddrPosLists = make([][]uint32, zb0011)
			}
			for za0011 := range z.AddrPosLists {
				var zb0012 uint32
				zb0012, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "AddrPosLists", za0011)
					return
				}
				if cap(z.AddrPosLists[za0011]) >= int(zb0012) {
					z.AddrPosLists[za0011] = (z.AddrPosLists[za0011])[:zb0012]
				} else {
					z.AddrPosLists[za0011] = make([]uint32, zb0012)
				}
				for za0012 := range z.AddrPosLists[za0011] {
					z.AddrPosLists[za0011][za0012], err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "AddrPosLists", za0011, za0012)
						return
					}
				}
			}
		case "th":
			var zb0013 uint32
			zb0013, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TopicHashes")
				return
			}
			if cap(z.TopicHashes) >= int(zb0013) {
				z.TopicHashes = (z.TopicHashes)[:zb0013]
			} else {
				z.TopicHashes = make([]uint64, zb0013)
			}
			for za0013 := range z.TopicHashes {
				z.TopicHashes[za0013], err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "TopicHashes", za0013)
					return
				}
			}
		case "tp":
			var zb0014 uint32
			zb0014, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TopicPosLists")
				return
			}
			if cap(z.TopicPosLists) >= int(zb0014) {
				z.TopicPosLists = (z.TopicPosLists)[:zb0014]
			} else {
				z.TopicPosLists = make([][]uint32, zb0014)
			}
			for za0014 := range z.TopicPosLists {
				var zb0015 uint32
				zb0015, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "TopicPosLists", za0014)
					return
				}
				if cap(z.TopicPosLists[za0014]) >= int(zb0015) {
					z.TopicPosLists[za0014] = (z.TopicPosLists[za0014])[:zb0015]
				} else {
					z.TopicPosLists[za0014] = make([]uint32, zb0015)
				}
				for za0015 := range z.TopicPosLists[za0014] {
					z.TopicPosLists[za0014][za0015], err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "TopicPosLists", za0014, za0015)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BlockIndex) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 14
	// write "ht"
	err = en.Append(0x8e, 0xa2, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "bH"
	err = en.Append(0xa2, 0x62, 0x48)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.BlockHash)[:])
	if err != nil {
		err = msgp.WrapError(err, "BlockHash")
		return
	}
	// write "bh"
	err = en.Append(0xa2, 0x62, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BlockHash48)
	if err != nil {
		err = msgp.WrapError(err, "BlockHash48")
		return
	}
	// write "thl"
	err = en.Append(0xa3, 0x74, 0x68, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TxHash48List)))
	if err != nil {
		err = msgp.WrapError(err, "TxHash48List")
		return
	}
	for za0002 := range z.TxHash48List {
		err = en.WriteUint64(z.TxHash48List[za0002])
		if err != nil {
			err = msgp.WrapError(err, "TxHash48List", za0002)
			return
		}
	}
	// write "bo"
	err = en.Append(0xa2, 0x62, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BeginOffset)
	if err != nil {
		err = msgp.WrapError(err, "BeginOffset")
		return
	}
	// write "tpl"
	err = en.Append(0xa3, 0x74, 0x70, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TxPosList)))
	if err != nil {
		err = msgp.WrapError(err, "TxPosList")
		return
	}
	for za0003 := range z.TxPosList {
		err = en.WriteInt64(z.TxPosList[za0003])
		if err != nil {
			err = msgp.WrapError(err, "TxPosList", za0003)
			return
		}
	}
	// write "sh"
	err = en.Append(0xa2, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.SrcHashes)))
	if err != nil {
		err = msgp.WrapError(err, "SrcHashes")
		return
	}
	for za0004 := range z.SrcHashes {
		err = en.WriteUint64(z.SrcHashes[za0004])
		if err != nil {
			err = msgp.WrapError(err, "SrcHashes", za0004)
			return
		}
	}
	// write "sp"
	err = en.Append(0xa2, 0x73, 0x70)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.SrcPosLists)))
	if err != nil {
		err = msgp.WrapError(err, "SrcPosLists")
		return
	}
	for za0005 := range z.SrcPosLists {
		err = en.WriteArrayHeader(uint32(len(z.SrcPosLists[za0005])))
		if err != nil {
			err = msgp.WrapError(err, "SrcPosLists", za0005)
			return
		}
		for za0006 := range z.SrcPosLists[za0005] {
			err = en.WriteUint32(z.SrcPosLists[za0005][za0006])
			if err != nil {
				err = msgp.WrapError(err, "SrcPosLists", za0005, za0006)
				return
			}
		}
	}
	// write "dh"
	err = en.Append(0xa2, 0x64, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DstHashes)))
	if err != nil {
		err = msgp.WrapError(err, "DstHashes")
		return
	}
	for za0007 := range z.DstHashes {
		err = en.WriteUint64(z.DstHashes[za0007])
		if err != nil {
			err = msgp.WrapError(err, "DstHashes", za0007)
			return
		}
	}
	// write "dp"
	err = en.Append(0xa2, 0x64, 0x70)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DstPosLists)))
	if err != nil {
		err = msgp.WrapError(err, "DstPosLists")
		return
	}
	for za0008 := range z.DstPosLists {
		err = en.WriteArrayHeader(uint32(len(z.DstPosLists[za0008])))
		if err != nil {
			err = msgp.WrapError(err, "DstPosLists", za0008)
			return
		}
		for za0009 := range z.DstPosLists[za0008] {
			err = en.WriteUint32(z.DstPosLists[za0008][za0009])
			if err != nil {
				err = msgp.WrapError(err, "DstPosLists", za0008, za0009)
				return
			}
		}
	}
	// write "ah"
	err = en.Append(0xa2, 0x61, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.AddrHashes)))
	if err != nil {
		err = msgp.WrapError(err, "AddrHashes")
		return
	}
	for za0010 := range z.AddrHashes {
		err = en.WriteUint64(z.AddrHashes[za0010])
		if err != nil {
			err = msgp.WrapError(err, "AddrHashes", za0010)
			return
		}
	}
	// write "ap"
	err = en.Append(0xa2, 0x61, 0x70)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.AddrPosLists)))
	if err != nil {
		err = msgp.WrapError(err, "AddrPosLists")
		return
	}
	for za0011 := range z.AddrPosLists {
		err = en.WriteArrayHeader(uint32(len(z.AddrPosLists[za0011])))
		if err != nil {
			err = msgp.WrapError(err, "AddrPosLists", za0011)
			return
		}
		for za0012 := range z.AddrPosLists[za0011] {
			err = en.WriteUint32(z.AddrPosLists[za0011][za0012])
			if err != nil {
				err = msgp.WrapError(err, "AddrPosLists", za0011, za0012)
				return
			}
		}
	}
	// write "th"
	err = en.Append(0xa2, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TopicHashes)))
	if err != nil {
		err = msgp.WrapError(err, "TopicHashes")
		return
	}
	for za0013 := range z.TopicHashes {
		err = en.WriteUint64(z.TopicHashes[za0013])
		if err != nil {
			err = msgp.WrapError(err, "TopicHashes", za0013)
			return
		}
	}
	// write "tp"
	err = en.Append(0xa2, 0x74, 0x70)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TopicPosLists)))
	if err != nil {
		err = msgp.WrapError(err, "TopicPosLists")
		return
	}
	for za0014 := range z.TopicPosLists {
		err = en.WriteArrayHeader(uint32(len(z.TopicPosLists[za0014])))
		if err != nil {
			err = msgp.WrapError(err, "TopicPosLists", za0014)
			return
		}
		for za0015 := range z.TopicPosLists[za0014] {
			err = en.WriteUint32(z.TopicPosLists[za0014][za0015])
			if err != nil {
				err = msgp.WrapError(err, "TopicPosLists", za0014, za0015)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BlockIndex) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 14
	// string "ht"
	o = append(o, 0x8e, 0xa2, 0x68, 0x74)
	o = msgp.AppendUint32(o, z.Height)
	// string "bH"
	o = append(o, 0xa2, 0x62, 0x48)
	o = msgp.AppendBytes(o, (z.BlockHash)[:])
	// string "bh"
	o = append(o, 0xa2, 0x62, 0x68)
	o = msgp.AppendUint64(o, z.BlockHash48)
	// string "thl"
	o = append(o, 0xa3, 0x74, 0x68, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TxHash48List)))
	for za0002 := range z.TxHash48List {
		o = msgp.AppendUint64(o, z.TxHash48List[za0002])
	}
	// string "bo"
	o = append(o, 0xa2, 0x62, 0x6f)
	o = msgp.AppendInt64(o, z.BeginOffset)
	// string "tpl"
	o = append(o, 0xa3, 0x74, 0x70, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TxPosList)))
	for za0003 := range z.TxPosList {
		o = msgp.AppendInt64(o, z.TxPosList[za0003])
	}
	// string "sh"
	o = append(o, 0xa2, 0x73, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.SrcHashes)))
	for za0004 := range z.SrcHashes {
		o = msgp.AppendUint64(o, z.SrcHashes[za0004])
	}
	// string "sp"
	o = append(o, 0xa2, 0x73, 0x70)
	o = msgp.AppendArrayHeader(o, uint32(len(z.SrcPosLists)))
	for za0005 := range z.SrcPosLists {
		o = msgp.AppendArrayHeader(o, uint32(len(z.SrcPosLists[za0005])))
		for za0006 := range z.SrcPosLists[za0005] {
			o = msgp.AppendUint32(o, z.SrcPosLists[za0005][za0006])
		}
	}
	// string "dh"
	o = append(o, 0xa2, 0x64, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DstHashes)))
	for za0007 := range z.DstHashes {
		o = msgp.AppendUint64(o, z.DstHashes[za0007])
	}
	// string "dp"
	o = append(o, 0xa2, 0x64, 0x70)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DstPosLists)))
	for za0008 := range z.DstPosLists {
		o = msgp.AppendArrayHeader(o, uint32(len(z.DstPosLists[za0008])))
		for za0009 := range z.DstPosLists[za0008] {
			o = msgp.AppendUint32(o, z.DstPosLists[za0008][za0009])
		}
	}
	// string "ah"
	o = append(o, 0xa2, 0x61, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.AddrHashes)))
	for za0010 := range z.AddrHashes {
		o = msgp.AppendUint64(o, z.AddrHashes[za0010])
	}
	// string "ap"
	o = append(o, 0xa2, 0x61, 0x70)
	o = msgp.AppendArrayHeader(o, uint32(len(z.AddrPosLists)))
	for za0011 := range z.AddrPosLists {
		o = msgp.AppendArrayHeader(o, uint32(len(z.AddrPosLists[za0011])))
		for za0012 := range z.AddrPosLists[za0011] {
			o = msgp.AppendUint32(o, z.AddrPosLists[za0011][za0012])
		}
	}
	// string "th"
	o = append(o, 0xa2, 0x74, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TopicHashes)))
	for za0013 := range z.TopicHashes {
		o = msgp.AppendUint64(o, z.TopicHashes[za0013])
	}
	// string "tp"
	o = append(o, 0xa2, 0x74, 0x70)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TopicPosLists)))
	for za0014 := range z.TopicPosLists {
		o = msgp.AppendArrayHeader(o, uint32(len(z.TopicPosLists[za0014])))
		for za0015 := range z.TopicPosLists[za0014] {
			o = msgp.AppendUint32(o, z.TopicPosLists[za0014][za0015])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlockIndex) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ht":
			z.Height, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "bH":
			bts, err = msgp.ReadExactBytes(bts, (z.BlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "bh":
			z.BlockHash48, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockHash48")
				return
			}
		case "thl":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxHash48List")
				return
			}
			if cap(z.TxHash48List) >= int(zb0002) {
				z.TxHash48List = (z.TxHash48List)[:zb0002]
			} else {
				z.TxHash48List = make([]uint64, zb0002)
			}
			for za0002 := range z.TxHash48List {
				z.TxHash48List[za0002], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxHash48List", za0002)
					return
				}
			}
		case "bo":
			z.BeginOffset, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BeginOffset")
				return
			}
		case "tpl":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxPosList")
				return
			}
			if cap(z.TxPosList) >= int(zb0003) {
				z.TxPosList = (z.TxPosList)[:zb0003]
			} else {
				z.TxPosList = make([]int64, zb0003)
			}
			for za0003 := range z.TxPosList {
				z.TxPosList[za0003], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TxPosList", za0003)
					return
				}
			}
		case "sh":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SrcHashes")
				return
			}
			if cap(z.SrcHashes) >= int(zb0004) {
				z.SrcHashes = (z.SrcHashes)[:zb0004]
			} else {
				z.SrcHashes = make([]uint64, zb0004)
			}
			for za0004 := range z.SrcHashes {
				z.SrcHashes[za0004], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SrcHashes", za0004)
					return
				}
			}
		case "sp":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SrcPosLists")
				return
			}
			if cap(z.SrcPosLists) >= int(zb0005) {
				z.SrcPosLists = (z.SrcPosLists)[:zb0005]
			} else {
				z.SrcPosLists = make([][]uint32, zb0005)
			}
			for za0005 := range z.SrcPosLists {
				var zb0006 uint32
				zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SrcPosLists", za0005)
					return
				}
				if cap(z.SrcPosLists[za0005]) >= int(zb0006) {
					z.SrcPosLists[za0005] = (z.SrcPosLists[za0005])[:zb0006]
				} else {
					z.SrcPosLists[za0005] = make([]uint32, zb0006)
				}
				for za0006 := range z.SrcPosLists[za0005] {
					z.SrcPosLists[za0005][za0006], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "SrcPosLists", za0005, za0006)
						return
					}
				}
			}
		case "dh":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DstHashes")
				return
			}
			if cap(z.DstHashes) >= int(zb0007) {
				z.DstHashes = (z.DstHashes)[:zb0007]
			} else {
				z.DstHashes = make([]uint64, zb0007)
			}
			for za0007 := range z.DstHashes {
				z.DstHashes[za0007], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DstHashes", za0007)
					return
				}
			}
		case "dp":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DstPosLists")
				return
			}
			if cap(z.DstPosLists) >= int(zb0008) {
				z.DstPosLists = (z.DstPosLists)[:zb0008]
			} else {
				z.DstPosLists = make([][]uint32, zb0008)
			}
			for za0008 := range z.DstPosLists {
				var zb0009 uint32
				zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DstPosLists", za0008)
					return
				}
				if cap(z.DstPosLists[za0008]) >= int(zb0009) {
					z.DstPosLists[za0008] = (z.DstPosLists[za0008])[:zb0009]
				} else {
					z.DstPosLists[za0008] = make([]uint32, zb0009)
				}
				for za0009 := range z.DstPosLists[za0008] {
					z.DstPosLists[za0008][za0009], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "DstPosLists", za0008, za0009)
						return
					}
				}
			}
		case "ah":
			var zb0010 uint32
			zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AddrHashes")
				return
			}
			if cap(z.AddrHashes) >= int(zb0010) {
				z.AddrHashes = (z.AddrHashes)[:zb0010]
			} else {
				z.AddrHashes = make([]uint64, zb0010)
			}
			for za0010 := range z.AddrHashes {
				z.AddrHashes[za0010], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AddrHashes", za0010)
					return
				}
			}
		case "ap":
			var zb0011 uint32
			zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AddrPosLists")
				return
			}
			if cap(z.AddrPosLists) >= int(zb0011) {
				z.AddrPosLists = (z.AddrPosLists)[:zb0011]
			} else {
				z.AddrPosLists = make([][]uint32, zb0011)
			}
			for za0011 := range z.AddrPosLists {
				var zb0012 uint32
				zb0012, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AddrPosLists", za0011)
					return
				}
				if cap(z.AddrPosLists[za0011]) >= int(zb0012) {
					z.AddrPosLists[za0011] = (z.AddrPosLists[za0011])[:zb0012]
				} else {
					z.AddrPosLists[za0011] = make([]uint32, zb0012)
				}
				for za0012 := range z.AddrPosLists[za0011] {
					z.AddrPosLists[za0011][za0012], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AddrPosLists", za0011, za0012)
						return
					}
				}
			}
		case "th":
			var zb0013 uint32
			zb0013, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TopicHashes")
				return
			}
			if cap(z.TopicHashes) >= int(zb0013) {
				z.TopicHashes = (z.TopicHashes)[:zb0013]
			} else {
				z.TopicHashes = make([]uint64, zb0013)
			}
			for za0013 := range z.TopicHashes {
				z.TopicHashes[za0013], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TopicHashes", za0013)
					return
				}
			}
		case "tp":
			var zb0014 uint32
			zb0014, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TopicPosLists")
				return
			}
			if cap(z.TopicPosLists) >= int(zb0014) {
				z.TopicPosLists = (z.TopicPosLists)[:zb0014]
			} else {
				z.TopicPosLists = make([][]uint32, zb0014)
			}
			for za0014 := range z.TopicPosLists {
				var zb0015 uint32
				zb0015, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TopicPosLists", za0014)
					return
				}
				if cap(z.TopicPosLists[za0014]) >= int(zb0015) {
					z.TopicPosLists[za0014] = (z.TopicPosLists[za0014])[:zb0015]
				} else {
					z.TopicPosLists[za0014] = make([]uint32, zb0015)
				}
				for za0015 := range z.TopicPosLists[za0014] {
					z.TopicPosLists[za0014][za0015], bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TopicPosLists", za0014, za0015)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlockIndex) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 3 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 3 + msgp.Uint64Size + 4 + msgp.ArrayHeaderSize + (len(z.TxHash48List) * (msgp.Uint64Size)) + 3 + msgp.Int64Size + 4 + msgp.ArrayHeaderSize + (len(z.TxPosList) * (msgp.Int64Size)) + 3 + msgp.ArrayHeaderSize + (len(z.SrcHashes) * (msgp.Uint64Size)) + 3 + msgp.ArrayHeaderSize
	for za0005 := range z.SrcPosLists {
		s += msgp.ArrayHeaderSize + (len(z.SrcPosLists[za0005]) * (msgp.Uint32Size))
	}
	s += 3 + msgp.ArrayHeaderSize + (len(z.DstHashes) * (msgp.Uint64Size)) + 3 + msgp.ArrayHeaderSize
	for za0008 := range z.DstPosLists {
		s += msgp.ArrayHeaderSize + (len(z.DstPosLists[za0008]) * (msgp.Uint32Size))
	}
	s += 3 + msgp.ArrayHeaderSize + (len(z.AddrHashes) * (msgp.Uint64Size)) + 3 + msgp.ArrayHeaderSize
	for za0011 := range z.AddrPosLists {
		s += msgp.ArrayHeaderSize + (len(z.AddrPosLists[za0011]) * (msgp.Uint32Size))
	}
	s += 3 + msgp.ArrayHeaderSize + (len(z.TopicHashes) * (msgp.Uint64Size)) + 3 + msgp.ArrayHeaderSize
	for za0014 := range z.TopicPosLists {
		s += msgp.ArrayHeaderSize + (len(z.TopicPosLists[za0014]) * (msgp.Uint32Size))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExtendedBlock) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Block":
			err = z.Block.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Block")
				return
			}
		case "t2s":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Txid2sigMap")
				return
			}
			if z.Txid2sigMap == nil {
				z.Txid2sigMap = make(map[string][65]byte, zb0002)
			} else if len(z.Txid2sigMap) > 0 {
				for key := range z.Txid2sigMap {
					delete(z.Txid2sigMap, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 [65]byte
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Txid2sigMap")
					return
				}
				err = dc.ReadExactBytes((za0002)[:])
				if err != nil {
					err = msgp.WrapError(err, "Txid2sigMap", za0001)
					return
				}
				z.Txid2sigMap[za0001] = za0002
			}
		case "ua":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "UpdateOfADS")
				return
			}
			if z.UpdateOfADS == nil {
				z.UpdateOfADS = make(map[string]string, zb0003)
			} else if len(z.UpdateOfADS) > 0 {
				for key := range z.UpdateOfADS {
					delete(z.UpdateOfADS, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0004 string
				var za0005 string
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "UpdateOfADS")
					return
				}
				za0005, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "UpdateOfADS", za0004)
					return
				}
				z.UpdateOfADS[za0004] = za0005
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ExtendedBlock) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Block"
	err = en.Append(0x83, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
	if err != nil {
		return
	}
	err = z.Block.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Block")
		return
	}
	// write "t2s"
	err = en.Append(0xa3, 0x74, 0x32, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Txid2sigMap)))
	if err != nil {
		err = msgp.WrapError(err, "Txid2sigMap")
		return
	}
	for za0001, za0002 := range z.Txid2sigMap {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Txid2sigMap")
			return
		}
		err = en.WriteBytes((za0002)[:])
		if err != nil {
			err = msgp.WrapError(err, "Txid2sigMap", za0001)
			return
		}
	}
	// write "ua"
	err = en.Append(0xa2, 0x75, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.UpdateOfADS)))
	if err != nil {
		err = msgp.WrapError(err, "UpdateOfADS")
		return
	}
	for za0004, za0005 := range z.UpdateOfADS {
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "UpdateOfADS")
			return
		}
		err = en.WriteString(za0005)
		if err != nil {
			err = msgp.WrapError(err, "UpdateOfADS", za0004)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ExtendedBlock) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Block"
	o = append(o, 0x83, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
	o, err = z.Block.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Block")
		return
	}
	// string "t2s"
	o = append(o, 0xa3, 0x74, 0x32, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Txid2sigMap)))
	for za0001, za0002 := range z.Txid2sigMap {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendBytes(o, (za0002)[:])
	}
	// string "ua"
	o = append(o, 0xa2, 0x75, 0x61)
	o = msgp.AppendMapHeader(o, uint32(len(z.UpdateOfADS)))
	for za0004, za0005 := range z.UpdateOfADS {
		o = msgp.AppendString(o, za0004)
		o = msgp.AppendString(o, za0005)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExtendedBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Block":
			bts, err = z.Block.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Block")
				return
			}
		case "t2s":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Txid2sigMap")
				return
			}
			if z.Txid2sigMap == nil {
				z.Txid2sigMap = make(map[string][65]byte, zb0002)
			} else if len(z.Txid2sigMap) > 0 {
				for key := range z.Txid2sigMap {
					delete(z.Txid2sigMap, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 [65]byte
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Txid2sigMap")
					return
				}
				bts, err = msgp.ReadExactBytes(bts, (za0002)[:])
				if err != nil {
					err = msgp.WrapError(err, "Txid2sigMap", za0001)
					return
				}
				z.Txid2sigMap[za0001] = za0002
			}
		case "ua":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpdateOfADS")
				return
			}
			if z.UpdateOfADS == nil {
				z.UpdateOfADS = make(map[string]string, zb0003)
			} else if len(z.UpdateOfADS) > 0 {
				for key := range z.UpdateOfADS {
					delete(z.UpdateOfADS, key)
				}
			}
			for zb0003 > 0 {
				var za0004 string
				var za0005 string
				zb0003--
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UpdateOfADS")
					return
				}
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UpdateOfADS", za0004)
					return
				}
				z.UpdateOfADS[za0004] = za0005
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExtendedBlock) Msgsize() (s int) {
	s = 1 + 6 + z.Block.Msgsize() + 4 + msgp.MapHeaderSize
	if z.Txid2sigMap != nil {
		for za0001, za0002 := range z.Txid2sigMap {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize + (65 * (msgp.ByteSize))
		}
	}
	s += 3 + msgp.MapHeaderSize
	if z.UpdateOfADS != nil {
		for za0004, za0005 := range z.UpdateOfADS {
			_ = za0005
			s += msgp.StringPrefixSize + len(za0004) + msgp.StringPrefixSize + len(za0005)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.Hash48, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Hash48")
				return
			}
		case "l":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PosList")
				return
			}
			if cap(z.PosList) >= int(zb0002) {
				z.PosList = (z.PosList)[:zb0002]
			} else {
				z.PosList = make([]uint32, zb0002)
			}
			for za0001 := range z.PosList {
				z.PosList[za0001], err = dc.ReadUint32()
				if err != nil {
					err = msgp.WrapError(err, "PosList", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IndexEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "h"
	err = en.Append(0x82, 0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Hash48)
	if err != nil {
		err = msgp.WrapError(err, "Hash48")
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PosList)))
	if err != nil {
		err = msgp.WrapError(err, "PosList")
		return
	}
	for za0001 := range z.PosList {
		err = en.WriteUint32(z.PosList[za0001])
		if err != nil {
			err = msgp.WrapError(err, "PosList", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "h"
	o = append(o, 0x82, 0xa1, 0x68)
	o = msgp.AppendUint64(o, z.Hash48)
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PosList)))
	for za0001 := range z.PosList {
		o = msgp.AppendUint32(o, z.PosList[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.Hash48, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hash48")
				return
			}
		case "l":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PosList")
				return
			}
			if cap(z.PosList) >= int(zb0002) {
				z.PosList = (z.PosList)[:zb0002]
			} else {
				z.PosList = make([]uint32, zb0002)
			}
			for za0001 := range z.PosList {
				z.PosList[za0001], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PosList", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexEntry) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.ArrayHeaderSize + (len(z.PosList) * (msgp.Uint32Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Log) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = dc.ReadExactBytes((z.Address)[:])
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "t":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Topics")
				return
			}
			if cap(z.Topics) >= int(zb0002) {
				z.Topics = (z.Topics)[:zb0002]
			} else {
				z.Topics = make([][32]byte, zb0002)
			}
			for za0002 := range z.Topics {
				err = dc.ReadExactBytes((z.Topics[za0002])[:])
				if err != nil {
					err = msgp.WrapError(err, "Topics", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Log) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "a"
	err = en.Append(0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Address)[:])
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Topics)))
	if err != nil {
		err = msgp.WrapError(err, "Topics")
		return
	}
	for za0002 := range z.Topics {
		err = en.WriteBytes((z.Topics[za0002])[:])
		if err != nil {
			err = msgp.WrapError(err, "Topics", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Log) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "a"
	o = append(o, 0x82, 0xa1, 0x61)
	o = msgp.AppendBytes(o, (z.Address)[:])
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Topics)))
	for za0002 := range z.Topics {
		o = msgp.AppendBytes(o, (z.Topics[za0002])[:])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Log) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			bts, err = msgp.ReadExactBytes(bts, (z.Address)[:])
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "t":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Topics")
				return
			}
			if cap(z.Topics) >= int(zb0002) {
				z.Topics = (z.Topics)[:zb0002]
			} else {
				z.Topics = make([][32]byte, zb0002)
			}
			for za0002 := range z.Topics {
				bts, err = msgp.ReadExactBytes(bts, (z.Topics[za0002])[:])
				if err != nil {
					err = msgp.WrapError(err, "Topics", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Log) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 2 + msgp.ArrayHeaderSize + (len(z.Topics) * (32 * (msgp.ByteSize)))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Tx) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			err = dc.ReadExactBytes((z.HashId)[:])
			if err != nil {
				err = msgp.WrapError(err, "HashId")
				return
			}
		case "s":
			err = dc.ReadExactBytes((z.SrcAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "SrcAddr")
				return
			}
		case "d":
			err = dc.ReadExactBytes((z.DstAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "DstAddr")
				return
			}
		case "c":
			z.Content, err = dc.ReadBytes(z.Content)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "l":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "LogList")
				return
			}
			if cap(z.LogList) >= int(zb0002) {
				z.LogList = (z.LogList)[:zb0002]
			} else {
				z.LogList = make([]Log, zb0002)
			}
			for za0004 := range z.LogList {
				err = z.LogList[za0004].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "LogList", za0004)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Tx) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "h"
	err = en.Append(0x85, 0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.HashId)[:])
	if err != nil {
		err = msgp.WrapError(err, "HashId")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.SrcAddr)[:])
	if err != nil {
		err = msgp.WrapError(err, "SrcAddr")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.DstAddr)[:])
	if err != nil {
		err = msgp.WrapError(err, "DstAddr")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Content)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.LogList)))
	if err != nil {
		err = msgp.WrapError(err, "LogList")
		return
	}
	for za0004 := range z.LogList {
		err = z.LogList[za0004].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "LogList", za0004)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Tx) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "h"
	o = append(o, 0x85, 0xa1, 0x68)
	o = msgp.AppendBytes(o, (z.HashId)[:])
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendBytes(o, (z.SrcAddr)[:])
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendBytes(o, (z.DstAddr)[:])
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendBytes(o, z.Content)
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.LogList)))
	for za0004 := range z.LogList {
		o, err = z.LogList[za0004].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "LogList", za0004)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Tx) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			bts, err = msgp.ReadExactBytes(bts, (z.HashId)[:])
			if err != nil {
				err = msgp.WrapError(err, "HashId")
				return
			}
		case "s":
			bts, err = msgp.ReadExactBytes(bts, (z.SrcAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "SrcAddr")
				return
			}
		case "d":
			bts, err = msgp.ReadExactBytes(bts, (z.DstAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "DstAddr")
				return
			}
		case "c":
			z.Content, bts, err = msgp.ReadBytesBytes(bts, z.Content)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "l":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LogList")
				return
			}
			if cap(z.LogList) >= int(zb0002) {
				z.LogList = (z.LogList)[:zb0002]
			} else {
				z.LogList = make([]Log, zb0002)
			}
			for za0004 := range z.LogList {
				bts, err = z.LogList[za0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LogList", za0004)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Tx) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 2 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 2 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 2 + msgp.BytesPrefixSize + len(z.Content) + 2 + msgp.ArrayHeaderSize
	for za0004 := range z.LogList {
		s += z.LogList[za0004].Msgsize()
	}
	return
}
